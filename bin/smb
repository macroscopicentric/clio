#!/usr/bin/env ruby
lib = File.expand_path('../../lib', __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'anyway_config'
require 'thor'
require 'yaml'
require 'social_media_backup/twitter'

class SocialMediaBackup

    class Config < Anyway::Config
        config_name :smb
        attr_config twitter: {
            access_token: '',
            access_token_secret: '',
            archive_file_path: '',
            backup_file_path: '',
            consumer_key: '',
            consumer_secret: '',
            screen_name: '',
        }
    end

    # my attempt to share the config between all command and subcommand
    # classes. i'm not sure this is a good idea and i don't know if i'll
    # keep it. in the meantime, all CLI classes should inherit from this.
    # a potentially big issue with this tactic: this initialization gets
    # called in every class that subclasses it, so it gets called 2+ times
    # for a subcommand. this is currently not a problem but i could see it
    # being a big deal. i couldn't figure out how to fix this. thor is
    # poorly documented and i didn't know how to capture return values (or
    # if it even returns things) from `invoke`. unsurprisingly, moving the
    # initialization method to the individual classes didn't prevent it
    # from being called multiple times either.
    class CLIBase < Thor

        attr_accessor :config
        attr_accessor :config_filename

        def initialize(*args)
            super
            @config_filename = @options['config']
            @config = Config.new()
        end
    end

    class CLIConfig < CLIBase
        desc "edit", "Edit config"
        def edit()
            print "unimplemented"
        end

        desc "view", "Print config to console"
        long_desc <<-LONGDESC
            Print config for specified social media profile to console.
            If no social media profile is specified, print all config.
        LONGDESC
        def view()
            case
            when @parent_options['twitter']
                pp @config.twitter
            else
                pp @config
            end
        end
    end

    class CLI < CLIBase
        class_option :twitter, :type => :boolean, :default => false
        desc "backup", "Back up all configured social media profiles"
        def backup()
            case
            when @options['twitter']
                # twitter_backup = SocialMediaBackup::Twitter.new(config['twitter'], backup_file)
                # twitter_backup.import_and_merge_twitter_archive(twitter_archive)
                # twitter_backup.save
                # twitter_backup.back_up
                # twitter_backup.save
            else
                # SocialMediaBackup.back_up
                puts "this is backup"
            end
        end

        desc "config", "View or edit your smb config"
        subcommand "config", CLIConfig
    end

end

SocialMediaBackup::CLI.start(ARGV)
